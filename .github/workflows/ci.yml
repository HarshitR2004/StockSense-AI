# GitHub Actions CI Workflow for StockSense Agent
# This workflow runs automated tests on every push and pull request to main branch

name: Python Application CI

# Trigger Configuration
# Runs on pushes to main branch and all pull requests targeting main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Define CI Jobs
jobs:
  build:
    # Job Configuration
    name: Build and Test
    runs-on: ubuntu-latest

    # Define build steps
    steps:
      # Step 1: Checkout Repository Code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better Git operations
          fetch-depth: 0

      # Step 2: Set up Python Environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          # Cache pip dependencies for faster builds
          cache: 'pip'

      # Step 3: Install Dependencies
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install project dependencies
        run: |
          pip install -r requirements.txt

      - name: Install testing dependencies
        run: |
          pip install pytest requests

      # Step 4: Run Linting (Optional but recommended)
      - name: Run code quality checks
        run: |
          # Install flake8 for linting
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      # Step 5: Run Unit Tests (No external dependencies required)
      - name: Run unit tests
        run: |
          # Run only unit tests that don't require external services
          python run_tests.py unit
        env:
          # Set environment variables from GitHub secrets
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}

      # Step 6: Run Smoke Tests (Quick validation)
      - name: Run smoke tests
        run: |
          # Run quick smoke tests for basic functionality validation
          python run_tests.py smoke
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}

      # Step 7: Run Full Test Suite with Coverage (Optional)
      - name: Run tests with coverage
        run: |
          # Install coverage tool
          pip install coverage
          # Run pytest with coverage reporting
          coverage run -m pytest tests/test_tools.py -v
          # Generate coverage report
          coverage report -m
          # Generate HTML coverage report
          coverage html
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        continue-on-error: true

      # Step 8: Upload Coverage Reports (Optional)
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
        if: always()

      # Step 9: Upload Test Results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .pytest_cache/
            test-results.xml
        if: always()

  # Additional Jobs for Different Scenarios
  integration-tests:
    # Only run integration tests if unit tests pass
    needs: build
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      # Start the API server in background for integration tests
      - name: Start API server
        run: |
          # Start the StockSense API server in background
          python -m stocksense.main &
          # Wait for server to start
          sleep 10
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}

      - name: Run integration tests
        run: |
          # Run API integration tests
          python run_tests.py api
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}

  # Security and Code Quality Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        run: |
          # Check for known security vulnerabilities in dependencies
          safety check --file requirements.txt
        continue-on-error: true

      - name: Run bandit security scan
        run: |
          # Run security analysis on Python code
          bandit -r stocksense/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
        if: always()
