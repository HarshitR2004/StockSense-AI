name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_SETTINGS_MODULE: backend.settings
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      SECRET_KEY: test-secret
      DEBUG: "0"
      TESTING: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run migrations
        working-directory: backend
        run: python manage.py migrate

      - name: Run tests
        working-directory: backend
        run: python manage.py test --noinput

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
     

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      


      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
      
      - name: Create .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> backend/.env
          echo "DEBUG=${{ secrets.DEBUG }}" >> backend/.env
          echo "FIREBASE_TYPE=${{ secrets.FIREBASE_TYPE }}" >> backend/.env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> backend/.env
          echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> backend/.env
          echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> backend/.env
          echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> backend/.env
          echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> backend/.env
          echo "FIREBASE_AUTH_URI=${{ secrets.FIREBASE_AUTH_URI }}" >> backend/.env
          echo "FIREBASE_TOKEN_URI=${{ secrets.FIREBASE_TOKEN_URI }}" >> backend/.env
          echo "FIREBASE_AUTH_PROVIDER_X509_CERT_URL=${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}" >> backend/.env
          echo "FIREBASE_CLIENT_X509_CERT_URL=${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}" >> backend/.env
          echo "FIREBASE_UNIVERSE_DOMAIN=${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}" >> backend/.env
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> backend/.env

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.ECR_REPO }}:latest

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
            docker pull ${{ secrets.ECR_REPO }}:latest && \
            docker stop stocksense || true && \
            docker rm stocksense || true && \
            docker run -d -p 8000:8000 --name stocksense \
            -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
            -e SECRET_KEY='${{ secrets.SECRET_KEY }}' \
            -e DEBUG='${{ secrets.DEBUG }}' \
            -e FIREBASE_TYPE='${{ secrets.FIREBASE_TYPE }}' \
            -e FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}' \
            -e FIREBASE_PRIVATE_KEY_ID='${{ secrets.FIREBASE_PRIVATE_KEY_ID }}' \
            -e FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}' \
            -e FIREBASE_CLIENT_EMAIL='${{ secrets.FIREBASE_CLIENT_EMAIL }}' \
            -e FIREBASE_CLIENT_ID='${{ secrets.FIREBASE_CLIENT_ID }}' \
            -e FIREBASE_AUTH_URI='${{ secrets.FIREBASE_AUTH_URI }}' \
            -e FIREBASE_TOKEN_URI='${{ secrets.FIREBASE_TOKEN_URI }}' \
            -e FIREBASE_AUTH_PROVIDER_X509_CERT_URL='${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}' \
            -e FIREBASE_CLIENT_X509_CERT_URL='${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}' \
            -e FIREBASE_UNIVERSE_DOMAIN='${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}' \
            -e FIREBASE_STORAGE_BUCKET='${{ secrets.FIREBASE_STORAGE_BUCKET }}' \
            ${{ secrets.ECR_REPO }}:latest"

      - name: Health Check
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
            echo 'Waiting for container to start...' && \
            sleep 30 && \
            echo 'Checking container status...' && \
            docker ps | grep stocksense && \
            echo 'Testing health endpoint...' && \
            RESPONSE=\$(curl -s -w '%{http_code}' http://localhost:8000/ 2>/dev/null); \
            HTTP_CODE=\${RESPONSE: -3}; \
            BODY=\${RESPONSE%???}; \
            if [ \"\$HTTP_CODE\" = \"200\" ]; then \
              echo 'Health check passed!'; \
              echo 'Response: '\$BODY; \
            else \
              echo 'Health check failed (HTTP \$HTTP_CODE)'; \
              docker logs stocksense --tail 50; \
              exit 1; \
            fi"
